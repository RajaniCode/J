# src/main/java/com/rajani/controller/MovieController.java
package com.rajani.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.jboss.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import com.rajani.model.Movie;
import com.rajani.service.MovieService;

@Controller
public class MovieController {

    private static final Logger logger = Logger
		.getLogger(MovieController.class);

    public MovieController() {
		System.out.println("MovieController()");
	}

    @Autowired
    private MovieService movieService;


    @RequestMapping(value = {"", "/", "home"})
    public ModelAndView listMovie(ModelAndView model) throws IOException {
    	List<Movie> listMovie = movieService.getAllMovies();
    	model.addObject("listMovie", listMovie);
    	model.setViewName("home");
    	return model;
    }

    @RequestMapping(value = "/newMovie", method = RequestMethod.GET)
    public ModelAndView newContact(ModelAndView model) {
    	Movie movi = new Movie();
    	model.addObject("movie", movi);
    	model.setViewName("MovieForm");
    	return model;
    }

    @RequestMapping(value = "/saveMovie", method = RequestMethod.POST)
    public ModelAndView saveMovie(@ModelAttribute Movie movi) {
        if (movi.getId() == 0) { // if movie id is 0 then creating the
            // movie other updating the movie
            movieService.addMovie(movi);
    	} else {
            movieService.updateMovie(movi);
    	}
    	return new ModelAndView("redirect:/");
    }

    @RequestMapping(value = "/deleteMovie", method = RequestMethod.GET)
    public ModelAndView deleteMovie(HttpServletRequest request) {
        int movieId = Integer.parseInt(request.getParameter("id"));
        movieService.deleteMovie(movieId);
        return new ModelAndView("redirect:/");
    }

    @RequestMapping(value = "/editMovie", method = RequestMethod.GET)
    public ModelAndView editContact(HttpServletRequest request) {
        int movieId = Integer.parseInt(request.getParameter("id"));
        Movie movi = movieService.getMovie(movieId);
        ModelAndView model = new ModelAndView("MovieForm");
        model.addObject("movie", movi);

    	return model;
    }

}

# src/main/java/com/rajani/dao/MovieDAO.java
package com.rajani.dao;
 
import java.util.List;
import com.rajani.model.Movie;
 
public interface MovieDAO {
 
    public void addMovie(Movie movi);
 
    public List<Movie> getAllMovies();
 
    public void deleteMovie(Integer movieId);
 
    public Movie updateMovie(Movie movi);
 
    public Movie getMovie(int movieId);
}

# src/main/java/com/rajani/dao/MovieDAOImpl.java
package com.rajani.dao;
 
import java.util.List;
 
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
 
import com.rajani.model.Movie;
 
@Repository
public class MovieDAOImpl implements MovieDAO {
 
    @Autowired
    private SessionFactory sessionFactory;
 
    public void addMovie(Movie movi) {
        sessionFactory.getCurrentSession().saveOrUpdate(movi);
 
    }
 
    @SuppressWarnings("unchecked")
    public List<Movie> getAllMovies() {
 
        return sessionFactory.getCurrentSession().createQuery("from Movie")
                .list();
    }
 
    @Override
    public void deleteMovie(Integer movieId) {
        Movie movi = (Movie) sessionFactory.getCurrentSession().load(
                Movie.class, movieId);
        if (null != movi) {
            this.sessionFactory.getCurrentSession().delete(movi);
        }
 
    }
 
    public Movie getMovie(int movieId) {
        return (Movie) sessionFactory.getCurrentSession().get(
                Movie.class, movieId);
    }
 
    @Override
    public Movie updateMovie(Movie movi) {
        sessionFactory.getCurrentSession().update(movi);
        return movi;
    }
 
}

# src/main/java/com/rajani/model/Movie.java
package com.rajani.model;
 
import java.io.Serializable;
 
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
 
import java.sql.Date;

@Entity
@Table(name = "Movie")
public class Movie implements Serializable {

    @Id
    //@GeneratedValue(strategy = GenerationType.AUTO)
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    @Column(name="id")
    private int id;

    @Column(name = "title", nullable = false)
    private String title;

    @Column(name = "release_date", nullable = false)
    private java.sql.Date release_date;

    @Column(name = "price", nullable = false)
    private double price;

    @Column(name = "genre", nullable = false)
    private String genre;

    @Column(name = "rating", nullable = false)
    private String rating;

    public int getId() {
    	return id;
    }

    public void setId(int id) {
    	this.id = id;
    }

    public String getTitle() {
    	return title;
    }

    public void setTitle(String title) {
    	this.title = title;
    }

    public java.sql.Date getRelease_date() {
    	return release_date;
    }

    public void setRelease_date(java.sql.Date release_date) {
    	this.release_date = release_date;
    }

    public double getPrice() {
    	return price;
    }

    public void setPrice(double price) {
    	this.price = price;
    }

    public String getGenre() {
    	return genre;
    }

    public void setGenre(String genre) {
    	this.genre = genre;
    }

    public String getRating() {
    	return rating;
    }

    public void setRating(String rating) {
    	this.rating = rating;
    }
}

# src/main/java/com/rajani/service/MovieService.java
package com.rajani.service;
 
import java.util.List;
 
import com.rajani.model.Movie;
 
public interface MovieService {
     
    public void addMovie(Movie movi);
 
    public List<Movie> getAllMovies();
 
    public void deleteMovie(Integer movieId);
 
    public Movie getMovie(int movieid);
 
    public Movie updateMovie(Movie movi);
}

# src/main/java/com/rajani/service/MovieServiceImpl.java
package com.rajani.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.rajani.dao.MovieDAO;
import com.rajani.model.Movie;

@Service
@Transactional
public class MovieServiceImpl implements MovieService {

    @Autowired
    private MovieDAO movieDAO;

    @Override
    @Transactional
    public void addMovie(Movie movi) {
	movieDAO.addMovie(movi);
    }

    @Override
    @Transactional
    public List<Movie> getAllMovies() {
	return movieDAO.getAllMovies();
    }

    @Override
    @Transactional
    public void deleteMovie(Integer movieId) {
	movieDAO.deleteMovie(movieId);
    }

    public Movie getMovie(int movieId) {
	return movieDAO.getMovie(movieId);
    }

    public Movie updateMovie(Movie movi) {
	return movieDAO.updateMovie(movi);
    }

    public void setMovieDAO(MovieDAO movieDAO) {
	this.movieDAO = movieDAO;
    }
}

# src/main/webapp/WEB-INF/pages/home.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

        <!--
        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        --> 

        <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/js/jquery-ui-themes-1.12.1/themes/base/jquery-ui.css" />  
        <script src="${pageContext.request.contextPath}/resources/js/jquery-1.12.4.js"></script>
        <script src="${pageContext.request.contextPath}/resources/js/jquery-ui-1.12.1/jquery-ui.js"></script>

        <title>Movie List</title>
    </head>
    <body>
        <div align="center">
            <h1>Movie List</h1>		
	    <table border="1">
		<th>Title</th>
		<th>Release Date</th>
		<th>Price</th>
		<th>Genre</th>
		<th>Rating</th>
                <th>Edit&nbsp;&nbsp;|&nbsp;&nbsp;Delete</th>
		<c:forEach var="movi" items="${listMovie}">
		    <tr>
                        <td>${movi.title}</td>
                        <td>${movi.release_date}</td>
                        <td>${movi.price}</td>
                        <td>${movi.genre}</td>
                        <td>${movi.rating}</td>
                        <td>
                            <a href="editMovie?id=${movi.id}">Edit</a>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="deleteMovie?id=${movi.id}">Delete</a>
                        </td>
		    </tr>
		</c:forEach>
	    </table>
	    <h4>Register new movie&nbsp;<a href="newMovie">here</a></h4>
	</div>
    </body>
</html>

# src/main/webapp/WEB-INF/pages/MovieForm.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

        <!--
        <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/themes/base/jquery-ui.css" rel="stylesheet" />
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
        <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/jquery-ui.min.js"></script>
        -->

        <!--
        <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        -->

        <link rel="stylesheet" href="${pageContext.request.contextPath}/resources/jQuery/jquery-ui-themes-1.12.1/themes/base/jquery-ui.css" />  
        <script src="${pageContext.request.contextPath}/resources/jQuery/jquery-1.12.4.js"></script>
        <script src="${pageContext.request.contextPath}/resources/jQuery/jquery-ui-1.12.1/jquery-ui.js"></script>

        <title>New/Edit Movie</title>
    </head>
    <body>
        <div align="center">
            <h1>New/Edit Movie</h1>
            <p>Please enter values in all the fields.</p>
            <form:form id="inputForm" action="saveMovie" method="post" modelAttribute="movie">
                <table>
                    <form:hidden path="id"/>
                    <tr>
                        <td>Title:</td>
                        <td><form:input type="text" path="title" id="inputTitle" /></td>
                    </tr
                    <tr>
                        <td>Release Date:</td>
                        <!--<td><form:input type="date" path="release_date" id="pickDate" pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}" /></td>-->
                        <td><form:input path="release_date" id="pickDate" placeholder="yyyy-mm-dd" /></td>           
                    </tr>
                    <tr>
                        <td>Price:</td>
                        <!--<td><form:input type="number" step="0.01" min="0" path="price" id="inputPrice" /></td>-->
                        <td><form:input path="price" id="inputPrice" /></td>
                    </tr>
                    <tr>
                        <td>Genre:</td>
                        <td><form:input type="text" path="genre" id="inputGenre" /></td>
                    </tr>
                    <tr>
                        <td>Rating:</td>
                        <td><form:input type="text" path="rating" id="inputRating" /></td>
                    </tr>
                    <tr>
                        <td colspan="2" align="center"><input type="submit" value="Save"></td>
                    </tr>
                </table>                
            </form:form>
        <span></span>
        <h4>Revert to movies list&nbsp;<a href="./">here</a></h4> 
        <script>
            $(document).submit(function( event ) {
                if ( $('input[id$=inputTitle]').val().replace(/^\s+|\s+$/g, "").length != 0
                    && $('input[id$=pickDate]').val().replace(/^\s+|\s+$/g, "").length != 0
                    && $('input[id$=inputPrice]').val().replace(/^\s+|\s+$/g, "").length != 0
                    && $('input[id$=inputGenre]').val().replace(/^\s+|\s+$/g, "").length != 0
                    && $('input[id$=inputRating]').val().replace(/^\s+|\s+$/g, "").length != 0 ) {
                    // $( "span" ).text( "Validated..." ).show();
                    return;
                }
                $( "span" ).text( "Please enter values in all the fields!" ).show().fadeOut( 1000 );
                event.preventDefault();
            });
               
            $(document).ready(function () {
                $('input[id$=pickDate]').datepicker({
                    dateFormat: 'yy-mm-dd',
                    changeMonth: true,
                    changeYear: true
                });
            });
            </script>
        </div>
    </body>
</html>

# src/main/webapp/WEB-INF/spring-servlet.xml
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Specifying base package of the Components like Controller, Service, 
		DAO -->
	<context:component-scan base-package="com.rajani" />

	<!-- Getting Database Properties -->
	<context:property-placeholder location="classpath:application.properties" />

	<mvc:annotation-driven />

	<!-- Specifying the Resource Location to load JS, CSS, Images etc -->
	<mvc:resources mapping="/resources/**" location="/resources/theme1/" />

	<!-- View Resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- DataSource -->
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="dataSource">
		<property name="driverClassName" value="${database.driver}"></property>
		<property name="url" value="${database.url}"></property>
		<property name="username" value="${database.user}"></property>
		<property name="password" value="${database.password}"></property>
	</bean>

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.rajani.model"></property>
	</bean>

	<!-- Transaction -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>

# src/main/webapp/WEB-INF/web.xml
<?xml version="1.0" encoding="ISO-8859-1" ?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    version="3.0">

	<display-name>Spring MVC Hibernate CRUD Example</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring-servlet.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>

# pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.rajani.spring</groupId>
    <artifactId>SpringMVCHibernateCRUD</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>SpringMVCHibernateCRUD Maven Webapp</name>
    <url>http://maven.apache.org</url>
    <!-- Specifying the Versions of Spring, Hiberante, MySQL etc -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <spring.version>4.1.5.RELEASE</spring.version>
        <hibernate.version>4.3.8.Final</hibernate.version>	
        <mysql.version>8.0.12</mysql.version>
        <junit-version>4.12</junit-version>
        <servlet-api-version>3.1.0</servlet-api-version>
        <jsp-version>2.1</jsp-version>
        <jstl-version>1.2</jstl-version>
        <java.version>1.10</java.version>       
    </properties>
       <dependencies>
              <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>
 
        <!-- Hibernate 4 dependencies -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
 
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-c3p0</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
 
        <!--MYSQL Connector -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
 
        <!-- Servlet and JSP -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet-api-version}</version>
        </dependency>
 
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>${jsp-version}</version>
            <scope>provided</scope>
        </dependency>
 
        <!-- JSTL dependency -->
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl-version}</version>
        </dependency>
 
        <!-- JUnit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit-version}</version>
            <scope>test</scope>
        </dependency>
             
       </dependencies>
       <build>
              <finalName>SpringMVCHibernateCRUD</finalName>
              <plugins>
              <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                <configuration>
                    <includes>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
             
       </build>
</project>

# src/main/resources/application.properties
#Database related properties
database.driver=com.mysql.jdbc.Driver
database.url=jdbc:mysql://localhost:3306/springdb
database.user=root
database.password=My$ql@Server#8.0.12

#Hibernate related properties
hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.show_sql=true
hibernate.format_sql=true
hibernate.hbm2ddl.auto=update

# src/main/resources/db/springdb.sql
DROP DATABASE IF EXISTS `springdb`;
DELIMITER $$
CREATE DATABASE `springdb`;$$
DELIMITER ;

USE `springdb`;

DROP TABLE IF EXISTS `Movie`;
DELIMITER $$
CREATE TABLE `Movie`
(
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` varchar(50) NOT NULL, 
  `release_date` date NOT NULL,
  `price` double NOT NULL,
  `genre` varchar(50) NOT NULL,
  `rating` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
);$$
DELIMITER ;

SELECT * FROM Movie;

INSERT INTO Movie(title, release_date, price, genre, rating)
VALUES('The Post', '2017-12-14', 2.17, 'Historical Political Thriller', 'G');

INSERT INTO Movie(title, release_date, price, genre, rating)
VALUES('Swordfish', '2001-06-08', 2.01, 'Action Crime Thriller', 'PG');

INSERT INTO Movie(title, release_date, price, genre, rating)
VALUES('The Net', '1995-07-28', 1.95, 'Cyber Mystery Thriller', 'PG');

SELECT * FROM Movie;

USE `springdb`;

SELECT * FROM Movie;