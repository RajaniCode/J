Create working folder viz. Example

In the working folder viz. Example, create a folder for the Web Services viz. WebServices 

Create the following directory layout

WebServices
   |-src
   |-------com
   |---------sample
   |-----------ws
   |-----------endpoint
   |-----------client

1. Create a Web Service Endpoint Interface
File: HelloWorld.java in the following directory layout:
WebServices
   |-src
   |-------com
   |---------sample
   |-----------ws
   |-----------HelloWorld.java

package com.sample.ws;

import javax.jws.WebMethod;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.Style;
 
//Service Endpoint Interface
@WebService
@SOAPBinding(style = Style.RPC)
public interface HelloWorld {
    @WebMethod String getHelloWorldAsString(String name);
}


2. Create a Web Service Endpoint Implementation
File: HelloWorldImpl.java in the following directory layout:
WebServices
   |-src
   |-------com
   |---------sample
   |-----------ws
   |-----------HelloWorldImpl.java

package com.sample.ws;
 
import javax.jws.WebService;
 
//Service Implementation
@WebService(endpointInterface = "com.sample.ws.HelloWorld")
public class HelloWorldImpl implements HelloWorld {
    @Override
    public String getHelloWorldAsString(String name) {
        return "Hello World JAX-WS " + name;
    } 
}


3. Create a Endpoint Publisher
File : HelloWorldPublisher.java in the following directory layout:

WebServices
   |-src
   |-------com
   |---------sample
   |-----------endpoint
   |-----------HelloWorldPublisher.java

package com.sample.endpoint;

import static java.lang.System.out;
import javax.xml.ws.Endpoint;
import com.sample.ws.HelloWorldImpl;

//Endpoint publisher
public class HelloWorldPublisher {
    public static void main(String[] args) {
        out.println("Publishing . . .");
        Endpoint.publish("http://localhost:9999/ws/hello", new HelloWorldImpl());
        out.println("Published to endpoint: http://localhost:9999/ws/hello");
        out.println("Access the WSDL generated by the deployed web service via URL:");
        out.println("http://localhost:9999/ws/hello?wsdl");
    }
}

Command Prompt 1

Change directory to "src" folder residing in the working folder viz. WebServices

javac "com\sample\endpoint\HelloWorldPublisher.java"

java com.sample.endpoint.HelloWorldPublisher

Publishing . . .
Published to endpoint: http://localhost:9999/ws/hello
Access the WSDL generated by the deployed web service via URL:
http://localhost:9999/ws/hello?wsdl

GitBash 1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

MINGW64 /
$ cd "C:\R\Working\Java\JAX-WS\Example\WebServices\src"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServices/src
$ javac "com\sample\endpoint\HelloWorldPublisher.java"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServices/src
$ java com.sample.endpoint.HelloWorldPublisher
Publishing . . .
Published to endpoint: http://localhost:9999/ws/hello
Access the WSDL generated by the deployed web service via URL:
http://localhost:9999/ws/hello?wsdl
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

You can test the deployed web service by accessing the generated WSDL (Web Services Description Language) document via this URL: 
http://localhost:9999/ws/hello?wsdl


4. Web Service Clients
Create web service client to access to the published service.

4. 1. Java Web Service Client
Without any tool, you can create a Java web service client like this :
File: HelloWorldClient.java in the following directory layout:
WebServices
   |-src
   |-------com
   |---------sample
   |-----------client
   |-----------HelloWorldClient.java

package com.sample.client;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import com.sample.ws.HelloWorld;

public class HelloWorldClient {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://localhost:9999/ws/hello?wsdl");
        //1st argument service URI, refer to wsdl document above
        //2nd argument is service name, refer to wsdl document above
        QName qname = new QName("http://ws.sample.com/", "HelloWorldImplService");
        Service service = Service.create(url, qname);
        HelloWorld hello = service.getPort(HelloWorld.class);
        System.out.println(hello.getHelloWorldAsString("Java Web Service Client"));
    }
}

Command Prompt 2

Change directory to "src" folder residing in the working folder viz. WebServices

javac "com\sample\client\HelloWorldClient.java"

java com.sample.client.HelloWorldClient

Output:
Hello World JAX-WS Java Web Service Client

GitBash 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MINGW64 /
$ cd "C:\R\Working\Java\JAX-WS\Example\WebServices\src"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServices/src
$ javac "com\sample\client\HelloWorldClient.java"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServices/src
$ java com.sample.client.HelloWorldClient
Hello World JAX-WS  Java Web Service Client
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

4. 2. Java Web Service Client via wsimport
Alternatively, you can use “wsimport” tool to parse the published wsdl file, and generate necessary client files (stub) to access the published web service.

This wsimport tool is bundle with the JDK, you can find it at “JDK_PATH/bin” folder viz. C:\Program Files\Java\jdk1.8.0_77\bin
wsimport command:
wsimport -keep http://localhost:9999/ws/hello?wsdl

In the working folder viz. Example, create a Stub folder for the Web Services viz. WebServicesStub and create src folder

Command Prompt 2

Change directory to the src folder in the Stub viz. WebServicesStub

wsimport -keep http://localhost:9999/ws/hello?wsdl

GitBash 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


MINGW64 /
$ cd "C:\R\Working\Java\JAX-WS\Example\WebServicesStub\src"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServicesStub/src
$ wsimport -keep http://localhost:9999/ws/hello?wsdl
parsing WSDL...



Generating code...


Compiling code...


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

It will generate necessary client files depending on the provided wsdl file in the Stub viz. WebServicesStub

File : HelloWorld.java  in the following directory layout:
WebServicesStub
   |-src
   |-------com
   |---------sample
   |-----------ws
   |-----------HelloWorld.java


package com.sample.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.ws.Action;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "HelloWorld", targetNamespace = "http://ws.sample.com/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface HelloWorld {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://ws.sample.com/HelloWorld/getHelloWorldAsStringRequest", output = "http://ws.sample.com/HelloWorld/getHelloWorldAsStringResponse")
    public String getHelloWorldAsString(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

}

File : HelloWorldImplService.java  in the following directory layout:
WebServicesStub
   |-src
   |-------com
   |---------sample
   |-----------ws
   |-----------HelloWorldImplService


package com.sample.ws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "HelloWorldImplService", targetNamespace = "http://ws.sample.com/", wsdlLocation = "http://localhost:9999/ws/hello?wsdl")
public class HelloWorldImplService
    extends Service
{

    private final static URL HELLOWORLDIMPLSERVICE_WSDL_LOCATION;
    private final static WebServiceException HELLOWORLDIMPLSERVICE_EXCEPTION;
    private final static QName HELLOWORLDIMPLSERVICE_QNAME = new QName("http://ws.sample.com/", "HelloWorldImplService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:9999/ws/hello?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        HELLOWORLDIMPLSERVICE_WSDL_LOCATION = url;
        HELLOWORLDIMPLSERVICE_EXCEPTION = e;
    }

    public HelloWorldImplService() {
        super(__getWsdlLocation(), HELLOWORLDIMPLSERVICE_QNAME);
    }

    public HelloWorldImplService(WebServiceFeature... features) {
        super(__getWsdlLocation(), HELLOWORLDIMPLSERVICE_QNAME, features);
    }

    public HelloWorldImplService(URL wsdlLocation) {
        super(wsdlLocation, HELLOWORLDIMPLSERVICE_QNAME);
    }

    public HelloWorldImplService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, HELLOWORLDIMPLSERVICE_QNAME, features);
    }

    public HelloWorldImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HelloWorldImplService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns HelloWorld
     */
    @WebEndpoint(name = "HelloWorldImplPort")
    public HelloWorld getHelloWorldImplPort() {
        return super.getPort(new QName("http://ws.sample.com/", "HelloWorldImplPort"), HelloWorld.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HelloWorld
     */
    @WebEndpoint(name = "HelloWorldImplPort")
    public HelloWorld getHelloWorldImplPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.sample.com/", "HelloWorldImplPort"), HelloWorld.class, features);
    }

    private static URL __getWsdlLocation() {
        if (HELLOWORLDIMPLSERVICE_EXCEPTION!= null) {
            throw HELLOWORLDIMPLSERVICE_EXCEPTION;
        }
        return HELLOWORLDIMPLSERVICE_WSDL_LOCATION;
    }

}

4.3  Create a Java web service client which depends on the above generated files, in the Stub viz. WebServicesStub

File: HelloWorldClient.java in the following directory layout:
WebServicesStub
   |-src
   |-------com
   |---------sample
   |-----------client
   |-----------HelloWorldClient.java

package com.sample.client;

import com.sample.ws.HelloWorld;
import com.sample.ws.HelloWorldImplService;

public class HelloWorldClient {
    public static void main(String[] args) {
        HelloWorldImplService helloService = new HelloWorldImplService();
        HelloWorld hello = helloService.getHelloWorldImplPort();
        System.out.println(hello.getHelloWorldAsString("Java Web Service Client via wsimport"));
    }
}

Command Prompt 2

javac "com\sample\client\HelloWorldClient.java"

java com.sample.client.HelloWorldClient

Output:
Hello World JAX-WS Java Web Service Client via wsimport

GitBash 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServicesStub/src
$ javac "com\sample\client\HelloWorldClient.java"

MINGW64 /c/R/Working/Java/JAX-WS/Example/WebServicesStub/src
$ java com.sample.client.HelloWorldClient
Hello World JAX-WS Java Web Service Client via wsimport
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


5. Ruby Web Service Client
Often time, web service development is mixed use with other programming language. So, here’s a Ruby web service client example, which is used to access the published JAX-WS service.

Create Ruby file in any folder viz. Example

File: client.rb

# gem install savon
require 'savon' 

class ServiceClient

 def client
  Savon.client(wsdl: "http://localhost:9999/ws/hello?wsdl")
 end
  
 def get_hello_world(hash)
  #client = Savon.client(wsdl: "http://localhost:9999/ws/hello?wsdl") 
  response = client.call(:get_hello_world_as_string, message: hash)
  response.body[:get_hello_world_as_string_response][:return]
 rescue Savon::SOAPFault => error
  fault_code = error.to_hash[:fault][:faultcode]
  raise CustomError, fault_code
 end

end

puts ServiceClient.new.get_hello_world(:arg0 => "Ruby Web Service Client")

Command Prompt 2

Change directory to the working folder viz. Example

client.rb

Output:
Hello World JAX-WS Ruby Web Service Client

GitBash 2
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
MINGW64 /
$ cd "C:\R\Working\Java\JAX-WS\Example"

MINGW64 /c/R/Working/Java/JAX-WS/Example
$ gem --version
2.6.3

MINGW64 /c/R/Working/Java/JAX-WS/Example
$ gem install savon
Successfully installed mini_portile2-2.0.0
Nokogiri is built with the packaged libraries: libxml2-2.9.2, libxslt-1.1.28, zlib-1.2.8, libiconv-1.14.
Successfully installed nokogiri-1.6.7.2-x64-mingw32
Successfully installed rack-1.6.4
Successfully installed httpi-2.4.1
Successfully installed wasabi-3.5.0
Successfully installed nori-2.6.0
Successfully installed builder-3.2.2
Successfully installed gyoku-1.3.1
Successfully installed akami-1.3.1
Successfully installed savon-2.11.1
Parsing documentation for mini_portile2-2.0.0
Installing ri documentation for mini_portile2-2.0.0
Parsing documentation for nokogiri-1.6.7.2-x64-mingw32
Installing ri documentation for nokogiri-1.6.7.2-x64-mingw32
Parsing documentation for rack-1.6.4
Installing ri documentation for rack-1.6.4
Parsing documentation for httpi-2.4.1
Installing ri documentation for httpi-2.4.1
Parsing documentation for wasabi-3.5.0
Installing ri documentation for wasabi-3.5.0
Parsing documentation for nori-2.6.0
Installing ri documentation for nori-2.6.0
Parsing documentation for builder-3.2.2
Installing ri documentation for builder-3.2.2
Parsing documentation for gyoku-1.3.1
Installing ri documentation for gyoku-1.3.1
Parsing documentation for akami-1.3.1
Installing ri documentation for akami-1.3.1
Parsing documentation for savon-2.11.1
Installing ri documentation for savon-2.11.1
Done installing documentation for mini_portile2, nokogiri, rack, httpi, wasabi, nori, builder, gyoku, akami, savon after 24 seconds
10 gems installed

MINGW64 /c/R/Working/Java/JAX-WS/Example
$ ruby client.rb
Hello World JAX-WS Ruby Web Service Client
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$